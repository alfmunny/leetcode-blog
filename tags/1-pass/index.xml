<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>1-pass on LeetCode In The Shell</title>
    <link>//alfmunny.com/leetcode-blog/tags/1-pass/</link>
    <description>Recent content in 1-pass on LeetCode In The Shell</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Mar 2020 21:02:00 +0100</lastBuildDate>
    
	<atom:link href="//alfmunny.com/leetcode-blog/tags/1-pass/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>101 - Symmetric Tree</title>
      <link>//alfmunny.com/leetcode-blog/posts/101-symmetric-tree/</link>
      <pubDate>Wed, 25 Mar 2020 21:02:00 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/101-symmetric-tree/</guid>
      <description>leetcode
Problem Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center). For example, this binary tree [1,2,2,3,4,4,3] is symmetric: 1 / \ 2 2 / \ / \ 3 4 4 3 But the following [1,2,2,null,3,null,3] is not: 1 / \ 2 2 \ \ 3 3 Notes Recursion !
Solution Solution 1: recursive class Solution: def isSymmetric(self, root): if not root: return True return self.</description>
    </item>
    
    <item>
      <title>21 - Merge Two Sorted Lists</title>
      <link>//alfmunny.com/leetcode-blog/posts/21-merge-two-sorted-lists/</link>
      <pubDate>Wed, 25 Mar 2020 19:55:00 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/21-merge-two-sorted-lists/</guid>
      <description>leetcode
Problem Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists. Example: Input: 1-&amp;gt;2-&amp;gt;4, 1-&amp;gt;3-&amp;gt;4 Output: 1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4 Notes Recursion is your friend!
Solution Solution 1: Recursive class Solution: def mergeTwoLists(self, l1, l2): if not l1: return l2 if not l2: return l1 if l1.val &amp;gt; l2.val: l2.next = self.mergeTwoLists(l1, l2.next) return l2 else: l1.</description>
    </item>
    
    <item>
      <title>104 - Maximum Depth of Binary Tree</title>
      <link>//alfmunny.com/leetcode-blog/posts/104-maximum-depth-of-binary-tree/</link>
      <pubDate>Wed, 25 Mar 2020 17:16:00 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/104-maximum-depth-of-binary-tree/</guid>
      <description>leetcode
Problem Given a binary tree, find its maximum depth. The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node. Note: A leaf is a node with no children. Example: Given binary tree [3,9,20,null,null,15,7], 3 / \ 9 20 / \ 15 7 Notes Recursion is your friend!
Solution class Solution: def maxDepth(self, root): return 1 + max(self.maxDepth(root.right), self.</description>
    </item>
    
    <item>
      <title>122 - Best Time to Buy and Sell Stock II</title>
      <link>//alfmunny.com/leetcode-blog/posts/122-best-time-to-buy-and-sell-stock-ii/</link>
      <pubDate>Tue, 24 Mar 2020 15:26:00 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/122-best-time-to-buy-and-sell-stock-ii/</guid>
      <description>leetcode
Problem Say you have an array for which the ith element is the price of a given stock on day i. Design an algorithm to find the maximum profit. You may complete as many transactions as you like Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again). Example 1: Input: [7,1,5,3,6,4] Output: 7 Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.</description>
    </item>
    
    <item>
      <title>121 - Best Time to Buy and Sell Stock</title>
      <link>//alfmunny.com/leetcode-blog/posts/121-best-time-to-buy-and-sell-stock/</link>
      <pubDate>Tue, 24 Mar 2020 12:13:00 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/121-best-time-to-buy-and-sell-stock/</guid>
      <description>leetcode
Problem Say you have an array for which the ith element is the price of a given stock on day i. If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit. Note that you cannot sell a stock before you buy one. Example 1: Input: [7,1,5,3,6,4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.</description>
    </item>
    
  </channel>
</rss>