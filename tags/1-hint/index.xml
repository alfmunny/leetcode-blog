<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>1-hint on LeetCode In The Shell</title>
    <link>//alfmunny.com/leetcode-blog/tags/1-hint/</link>
    <description>Recent content in 1-hint on LeetCode In The Shell</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Mar 2020 02:18:32 +0100</lastBuildDate>
    
	<atom:link href="//alfmunny.com/leetcode-blog/tags/1-hint/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>//alfmunny.com/leetcode-blog/posts/readme/</link>
      <pubDate>Sat, 28 Mar 2020 02:18:32 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/readme/</guid>
      <description>322 - Coin Change leetcode
Problem You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1. Example 1: Input: coins = [1, 2, 5], amount = 11 Output: 3 Explanation: 11 = 5 + 5 + 1 Example 2: Input: coins = [2], amount = 3 Output: -1 Note: You may assume that you have an infinite number of each kind of coin.</description>
    </item>
    
    <item>
      <title>300 - Longest Increasing Subsequence</title>
      <link>//alfmunny.com/leetcode-blog/posts/300-longest-increasing-subsequence/</link>
      <pubDate>Sat, 28 Mar 2020 00:08:00 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/300-longest-increasing-subsequence/</guid>
      <description>leetcode
Problem Given an unsorted array of integers, find the length of longest increasing subsequence. Example: Input: [10,9,2,5,3,7,101,18] Output: 4 Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. Note: There may be more than one LIS combination, it is only necessary for you to return the length. Your algorithm should run in O(n2) complexity. Follow up: Could you improve it to O(n log n) time complexity? Notes Solution 1: DP with O(n^2) DP problem</description>
    </item>
    
  </channel>
</rss>