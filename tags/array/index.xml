<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>array on LeetCode In The Shell</title>
    <link>//alfmunny.com/leetcode-blog/tags/array/</link>
    <description>Recent content in array on LeetCode In The Shell</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 08 Jun 2020 23:45:00 +0200</lastBuildDate>
    
	<atom:link href="//alfmunny.com/leetcode-blog/tags/array/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>66 - Plus One</title>
      <link>//alfmunny.com/leetcode-blog/posts/66-plus-one/</link>
      <pubDate>Mon, 08 Jun 2020 23:45:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/66-plus-one/</guid>
      <description>leetcode
Problem Given a non-empty array of digits representing a non-negative integer, plus one to the integer. The digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit. You may assume the integer does not contain any leading zero, except the number 0 itself. Example 1: Input: [1,2,3] Output: [1,2,4] Explanation: The array represents the integer 123.</description>
    </item>
    
    <item>
      <title>38 - Count and Say</title>
      <link>//alfmunny.com/leetcode-blog/posts/38-count-and-say/</link>
      <pubDate>Mon, 08 Jun 2020 23:28:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/38-count-and-say/</guid>
      <description>leetcode
Problem The count-and-say sequence is the sequence of integers with the first five terms as following: 1. 1 2. 11 3. 21 4. 1211 5. 111221 1 is read off as &amp;#34;one 1&amp;#34; or 11. 11 is read off as &amp;#34;two 1s&amp;#34; or 21. 21 is read off as &amp;#34;one 2, then one 1&amp;#34; or 1211. Given an integer n where 1 ≤ n ≤ 30, generate the nth term of the count-and-say sequence.</description>
    </item>
    
    <item>
      <title>213 - House Robber II</title>
      <link>//alfmunny.com/leetcode-blog/posts/213-house-robber-ii/</link>
      <pubDate>Mon, 08 Jun 2020 23:24:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/213-house-robber-ii/</guid>
      <description>leetcode
Problem You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night. Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.</description>
    </item>
    
    <item>
      <title>406 - Queue Reconstruction by Height</title>
      <link>//alfmunny.com/leetcode-blog/posts/406-queue-reconstruction-by-height/</link>
      <pubDate>Mon, 08 Jun 2020 22:47:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/406-queue-reconstruction-by-height/</guid>
      <description>leetcode
Problem Suppose you have a random list of people standing in a queue. Each person is described by a pair of integers (h, k), where h is the height of the person and k is the number of people in front of this person who have a height greater than or equal to h. Write an algorithm to reconstruct the queue. Note: The number of people is less than 1,100.</description>
    </item>
    
    <item>
      <title>518 - Coin Change 2</title>
      <link>//alfmunny.com/leetcode-blog/posts/518-coin-change-2/</link>
      <pubDate>Sun, 07 Jun 2020 21:47:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/518-coin-change-2/</guid>
      <description>leetcode
Problem You are given coins of different denominations and a total amount of money. Write a function to compute the number of combinations that make up that amount. You may assume that you have infinite number of each kind of coin. Example 1: Input: amount = 5, coins = [1, 2, 5] Output: 4 Explanation: there are four ways to make up the amount: 5=5 5=2+2+1 5=2+1+1+1 5=1+1+1+1+1 Example 2: Input: amount = 3, coins = [2] Output: 0 Explanation: the amount of 3 cannot be made up just with coins of 2.</description>
    </item>
    
    <item>
      <title>528 - Random Pick with Weight</title>
      <link>//alfmunny.com/leetcode-blog/posts/528-random-pick-with-weight/</link>
      <pubDate>Fri, 05 Jun 2020 22:00:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/528-random-pick-with-weight/</guid>
      <description>leetcode
Problem Given an array w of positive integers, where w[i] describes the weight of index i, write a function pickIndex which randomly picks an index in proportion to its weight. Note: 1 &amp;lt;= w.length &amp;lt;= 10000 1 &amp;lt;= w[i] &amp;lt;= 10^5 pickIndex will be called at most 10000 times. Example 1: Input: [&amp;#34;Solution&amp;#34;,&amp;#34;pickIndex&amp;#34;] [[[1]],[]] Output: [null,0] Example 2: Input: [&amp;#34;Solution&amp;#34;,&amp;#34;pickIndex&amp;#34;,&amp;#34;pickIndex&amp;#34;,&amp;#34;pickIndex&amp;#34;,&amp;#34;pickIndex&amp;#34;,&amp;#34;pickIndex&amp;#34;] [[[1,3]],[],[],[],[],[]] Output: [null,0,1,1,1,0] Explanation of Input Syntax: The input is two lists: the subroutines called and their arguments.</description>
    </item>
    
    <item>
      <title>1029 - Two City Scheduling</title>
      <link>//alfmunny.com/leetcode-blog/posts/1029-two-city-scheduling/</link>
      <pubDate>Wed, 03 Jun 2020 20:30:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/1029-two-city-scheduling/</guid>
      <description>leetcode
Problem There are 2N people a company is planning to interview. The cost of flying the i-th person to city A is costs[i][0], and the cost of flying the i-th person to city B is costs[i][1]. Return the minimum cost to fly every person to a city such that exactly N people arrive in each city. Example 1: Input: [[10,20],[30,200],[400,50],[30,20]] Output: 110 Explanation: The first person goes to city A for a cost of 10.</description>
    </item>
    
    <item>
      <title>746 - Min Cost Climbing Stairs</title>
      <link>//alfmunny.com/leetcode-blog/posts/746-min-cost-climbing-stairs/</link>
      <pubDate>Tue, 02 Jun 2020 00:16:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/746-min-cost-climbing-stairs/</guid>
      <description>leetcode
Problem On a staircase, the i-th step has some non-negative cost cost[i] assigned (0 indexed). Once you pay the cost, you can either climb one or two steps. You need to find minimum cost to reach the top of the floor, and you can either start from the step with index 0, or the step with index 1. Example 1: Input: cost = [10, 15, 20] Output: 15 Explanation: Cheapest is start on cost[1], pay that cost and go to the top.</description>
    </item>
    
    <item>
      <title>973 - K Closest Points to Origin</title>
      <link>//alfmunny.com/leetcode-blog/posts/973-k-closest-points-to-origin/</link>
      <pubDate>Sat, 30 May 2020 23:58:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/973-k-closest-points-to-origin/</guid>
      <description>leetcode
Problem We have a list of points on the plane. Find the K closest points to the origin (0, 0). (Here, the distance between two points on a plane is the Euclidean distance.) You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in.) Example 1: Input: points = [[1,3],[-2,2]], K = 1 Output: [[-2,2]] Explanation: The distance between (1, 3) and the origin is sqrt(10).</description>
    </item>
    
    <item>
      <title>886 - Possible Bipartition</title>
      <link>//alfmunny.com/leetcode-blog/posts/886-possible-bipartition/</link>
      <pubDate>Wed, 27 May 2020 16:37:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/886-possible-bipartition/</guid>
      <description>leetcode
Problem Given a set of N people (numbered 1, 2, ..., N), we would like to split everyone into two groups of any size. Each person may dislike some other people, and they should not go into the same group. Formally, if dislikes[i] = [a, b], it means it is not allowed to put the people numbered a and b into the same group. Return true if and only if it is possible to split everyone into two groups in this way.</description>
    </item>
    
    <item>
      <title>1035 - Uncrossed Lines</title>
      <link>//alfmunny.com/leetcode-blog/posts/1035-uncrossed-lines/</link>
      <pubDate>Mon, 25 May 2020 16:38:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/1035-uncrossed-lines/</guid>
      <description>leetcode
Problem We write the integers of A and B (in the order they are given) on two separate horizontal lines. Now, we may draw connecting lines: a straight line connecting two numbers A[i] and B[j] such that: A[i] == B[j]; The line we draw does not intersect any other connecting (non-horizontal) line. Note that a connecting lines cannot intersect even at the endpoints: each number can only belong to one connecting line.</description>
    </item>
    
    <item>
      <title>986 - Interval List Intersections</title>
      <link>//alfmunny.com/leetcode-blog/posts/996-interval-list-intersections/</link>
      <pubDate>Sun, 24 May 2020 01:13:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/996-interval-list-intersections/</guid>
      <description>leetcode
Problem Given two lists of closed intervals, each list of intervals is pairwise disjoint and in sorted order. Return the intersection of these two interval lists. (Formally, a closed interval [a, b] (with a &amp;lt;= b) denotes the set of real numbers x with a &amp;lt;= x &amp;lt;= b. The intersection of two closed intervals is a set of real numbers that is either empty, or can be represented as a closed interval.</description>
    </item>
    
    <item>
      <title>451 - Sort Characters By Frequency</title>
      <link>//alfmunny.com/leetcode-blog/posts/451-sort-characters-by-frequency/</link>
      <pubDate>Fri, 22 May 2020 14:19:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/451-sort-characters-by-frequency/</guid>
      <description>leetcode
Problem Given a string, sort it in decreasing order based on the frequency of characters. Example 1: Input: &amp;#34;tree&amp;#34; Output: &amp;#34;eert&amp;#34; Explanation: &amp;#39;e&amp;#39; appears twice while &amp;#39;r&amp;#39; and &amp;#39;t&amp;#39; both appear once. So &amp;#39;e&amp;#39; must appear before both &amp;#39;r&amp;#39; and &amp;#39;t&amp;#39;. Therefore &amp;#34;eetr&amp;#34; is also a valid answer. Example 2: Input: &amp;#34;cccaaa&amp;#34; Output: &amp;#34;cccaaa&amp;#34; Explanation: Both &amp;#39;c&amp;#39; and &amp;#39;a&amp;#39; appear three times, so &amp;#34;aaaccc&amp;#34; is also a valid answer. Note that &amp;#34;cacaca&amp;#34; is incorrect, as the same characters must be together.</description>
    </item>
    
    <item>
      <title>76 - Minimum Window Substring</title>
      <link>//alfmunny.com/leetcode-blog/posts/76-minimum-window-substring/</link>
      <pubDate>Fri, 22 May 2020 00:41:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/76-minimum-window-substring/</guid>
      <description>leetcode
Problem Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n). Example: Input: S = &amp;#34;ADOBECODEBANC&amp;#34;, T = &amp;#34;ABC&amp;#34; Output: &amp;#34;BANC&amp;#34; Note: If there is no such window in S that covers all characters in T, return the empty string &amp;#34;&amp;#34;. If there is such window, you are guaranteed that there will always be only one unique minimum window in S.</description>
    </item>
    
    <item>
      <title>230 - Kth Smallest Element in a BST</title>
      <link>//alfmunny.com/leetcode-blog/posts/230-kth-smallest-element-in-a-bst/</link>
      <pubDate>Wed, 20 May 2020 22:37:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/230-kth-smallest-element-in-a-bst/</guid>
      <description>leetcode
Problem 230. Kth Smallest Element in a BST Medium 2239 57 Add to List Share Given a binary search tree, write a function kthSmallest to find the kth smallest element in it. Note: You may assume k is always valid, 1 ≤ k ≤ BST&amp;#39;s total elements. Example 1: Input: root = [3,1,4,null,2], k = 1 3 / \ 1 4 \ 2 Output: 1 Example 2: Input: root = [5,3,6,2,4,null,null,1], k = 3 5 / \ 3 6 / \ 2 4 / 1 Output: 3 Solution class Solution: def kthSmallest(self, root): self.</description>
    </item>
    
    <item>
      <title>901 - Onine Stock Span</title>
      <link>//alfmunny.com/leetcode-blog/posts/901-online-stock-span/</link>
      <pubDate>Tue, 19 May 2020 21:40:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/901-online-stock-span/</guid>
      <description>leetcode
Problem Write a class StockSpanner which collects daily price quotes for some stock, and returns the span of that stock&amp;#39;s price for the current day. The span of the stock&amp;#39;s price today is defined as the maximum number of consecutive days (starting from today and going backwards) for which the price of the stock was less than or equal to today&amp;#39;s price. For example, if the price of a stock over the next 7 days were [100, 80, 60, 70, 60, 75, 85], then the stock spans would be [1, 1, 1, 2, 1, 4, 6].</description>
    </item>
    
    <item>
      <title>567 - Permutation in String</title>
      <link>//alfmunny.com/leetcode-blog/posts/567-permutation-in-string/</link>
      <pubDate>Mon, 18 May 2020 18:14:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/567-permutation-in-string/</guid>
      <description>leetcode
Problem Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string&amp;#39;s permutations is the substring of the second string. Example 1: Input: s1 = &amp;#34;ab&amp;#34; s2 = &amp;#34;eidbaooo&amp;#34; Output: True Explanation: s2 contains one permutation of s1 (&amp;#34;ba&amp;#34;). Example 2: Input:s1= &amp;#34;ab&amp;#34; s2 = &amp;#34;eidboaoo&amp;#34; Output: False Note: The input strings only contain lower case letters.</description>
    </item>
    
    <item>
      <title>438 - Find All Anagrams in a String</title>
      <link>//alfmunny.com/leetcode-blog/posts/438-find-all-anagrams-in-a-string/</link>
      <pubDate>Mon, 18 May 2020 05:08:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/438-find-all-anagrams-in-a-string/</guid>
      <description>leetcode
Problem Given a string s and a non-empty string p, find all the start indices of p&amp;#39;s anagrams in s. Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100. The order of output does not matter. Example 1: Input: s: &amp;#34;cbaebabacd&amp;#34; p: &amp;#34;abc&amp;#34; Output: [0, 6] Explanation: The substring with start index = 0 is &amp;#34;cba&amp;#34;, which is an anagram of &amp;#34;abc&amp;#34;.</description>
    </item>
    
    <item>
      <title>918 - Maximum Sum Circular Subarray</title>
      <link>//alfmunny.com/leetcode-blog/posts/918-maximum-sum-circular-subarray/</link>
      <pubDate>Fri, 15 May 2020 22:27:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/918-maximum-sum-circular-subarray/</guid>
      <description>leetcode
Problem  Given a circular array C of integers represented by A, find the maximum possible sum of a non-empty subarray of C.
Here, a circular array means the end of the array connects to the beginning of the array. (Formally, C[i] = A[i] when 0 &amp;lt;= i &amp;lt; A.length, and C[i+A.length] = C[i] when i &amp;gt;= 0.)
Also, a subarray may only include each element of the fixed buffer A at most once.</description>
    </item>
    
    <item>
      <title>402 - Remove K Digits</title>
      <link>//alfmunny.com/leetcode-blog/posts/402-remove-k-digits/</link>
      <pubDate>Wed, 13 May 2020 22:26:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/402-remove-k-digits/</guid>
      <description>leetcode
Problem  Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.
Note: The length of num is less than 10002 and will be ≥ k. The given num does not contain any leading zero.
Example 1:
Input: num = &amp;ldquo;1432219&amp;rdquo;, k = 3 Output: &amp;ldquo;1219&amp;rdquo; Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.</description>
    </item>
    
    <item>
      <title>540 - Single Element in a Sorted Array</title>
      <link>//alfmunny.com/leetcode-blog/posts/540-single-element-in-a-sorted-array/</link>
      <pubDate>Tue, 12 May 2020 18:43:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/540-single-element-in-a-sorted-array/</guid>
      <description>leetcode
Problem  You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. Find this single element that appears only once.
Example 1:
Input: [1,1,2,3,3,4,4,8,8] Output: 2
Example 2:
Input: [3,3,7,7,10,11,11] Output: 10
 Solution class Solution: def singleNonDuplicate(self, nums): lo = 0 hi = len(nums) - 1 while lo &amp;lt; hi: mid = (lo + hi) // 2 if mid == 0: return mid if (mid - lo + 1) % 2 == 0: if nums[mid] == nums[mid - 1]: lo = mid + 1 else: hi = mid - 1 else: if nums[mid] == nums[mid - 1]: hi = mid - 2 else: lo = mid return nums[lo] print(Solution().</description>
    </item>
    
    <item>
      <title>128 - Longest Consecutive Sequence</title>
      <link>//alfmunny.com/leetcode-blog/posts/128-longest-consecutive-sequence/</link>
      <pubDate>Sat, 02 May 2020 16:34:20 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/128-longest-consecutive-sequence/</guid>
      <description>leetcode
Problem Given an unsorted array of integers, find the length of the longest consecutive elements sequence. Your algorithm should run in O(n) complexity. Example: Input: [100, 4, 200, 1, 3, 2] Output: 4 Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4. Solution Solution 1: Hash Map For each value, we maintain the left bound and right bound of range and also update the bounds for left value and right value.</description>
    </item>
    
    <item>
      <title>278 - First Bad Version</title>
      <link>//alfmunny.com/leetcode-blog/posts/278-first-bad-version/</link>
      <pubDate>Fri, 01 May 2020 22:00:09 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/278-first-bad-version/</guid>
      <description>leetcode
Problem You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad. Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.</description>
    </item>
    
    <item>
      <title>448 - Find All Numbers Disappeard in an Array</title>
      <link>//alfmunny.com/leetcode-blog/posts/448-find-all-numbers-disappeard-in-an-array/</link>
      <pubDate>Tue, 28 Apr 2020 17:10:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/448-find-all-numbers-disappeard-in-an-array/</guid>
      <description>leetcode
Problem Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.
Find all the elements of [1, n] inclusive that do not appear in this array.
Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.
Example:
Input: [4,3,2,7,8,2,3,1]
Output: [5,6]
Solution Move all the numbers to its position.</description>
    </item>
    
    <item>
      <title>169 - Majority Element</title>
      <link>//alfmunny.com/leetcode-blog/posts/169-majority-element/</link>
      <pubDate>Tue, 28 Apr 2020 16:22:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/169-majority-element/</guid>
      <description>leetcode
Problem Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.
You may assume that the array is non-empty and the majority element always exist in the array.
Example 1:
Input: [3,2,3] Output: 3
Example 2:
Input: [2,2,1,1,1,2,2] Output: 2
Solution Solution 1: Hash Table from collections import Counter class Solution: def majorityElement(self, nums): c = Counter() l = len(nums) for n in nums: c[n] += 1 if c[n] &amp;gt; l/2: return n print(Solution().</description>
    </item>
    
    <item>
      <title>560 Subarray Sum Equals K</title>
      <link>//alfmunny.com/leetcode-blog/posts/560-subarray-sum-equals-k/</link>
      <pubDate>Thu, 23 Apr 2020 01:38:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/560-subarray-sum-equals-k/</guid>
      <description>leetcode
Problem Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k. Example 1: Input:nums = [1,1,1], k = 2 Output: 2 Note: The length of the array is in range [1, 20,000]. The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7]. Solution class Solution: def subArraySum(self, nums, k): h = {0: 1} s = 0 ans = 0 for i in nums: s += i ans += h.</description>
    </item>
    
    <item>
      <title>Leftmost Column with at Least a One</title>
      <link>//alfmunny.com/leetcode-blog/posts/leftmost-column-with-at-least-a-one/</link>
      <pubDate>Wed, 22 Apr 2020 01:20:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/leftmost-column-with-at-least-a-one/</guid>
      <description>leetcode
Problem A binary matrix means that all elements are 0 or 1. For each individual row of the matrix, this row is sorted in non-decreasing order. Given a row-sorted binary matrix binaryMatrix, return leftmost column index(0-indexed) with at least a 1 in it. If such index doesn&amp;#39;t exist, return -1. You can&amp;#39;t access the Binary Matrix directly. You may only access the matrix using a BinaryMatrix interface: BinaryMatrix.get(x, y) returns the element of the matrix at index (x, y) (0-indexed).</description>
    </item>
    
    <item>
      <title>1008 - Construct Binary Search Tree from Preorder Traversal</title>
      <link>//alfmunny.com/leetcode-blog/posts/1008-construct-binary-search-tree-from-preorder-traversal/</link>
      <pubDate>Tue, 21 Apr 2020 07:44:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/1008-construct-binary-search-tree-from-preorder-traversal/</guid>
      <description>leetcode
Problem Return the root node of a binary search tree that matches the given preorder traversal. (Recall that a binary search tree is a binary tree where for every node, any descendant of node.left has a value &amp;lt; node.val, and any descendant of node.right has a value &amp;gt; node.val. Also recall that a preorder traversal displays the value of the node first, then traverses node.left, then traverses node.right.) Example 1: Input: [8,5,1,7,10,12] Output: [8,5,10,1,7,null,12] Solution We keep track of a low bound for the function.</description>
    </item>
    
    <item>
      <title>46 - Permutations</title>
      <link>//alfmunny.com/leetcode-blog/posts/46-permutations/</link>
      <pubDate>Sun, 19 Apr 2020 02:11:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/46-permutations/</guid>
      <description>leetcode
Problem Given a collection of distinct integers, return all possible permutations. Example: Input: [1,2,3] Output: [ [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1] ] Solution class Solution: def permute(self, nums): ans = [] self.backtrack([], nums, ans) return ans def backtrack(self, path, nums, ans): if not nums: ans.append(path[:]) return for i, v in enumerate(nums): self.backtrack(path+[v], nums[:i]+nums[i+1:], ans) </description>
    </item>
    
    <item>
      <title>47 - Permutations II</title>
      <link>//alfmunny.com/leetcode-blog/posts/47-permutations-ii/</link>
      <pubDate>Sun, 19 Apr 2020 01:40:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/47-permutations-ii/</guid>
      <description>leetcode
Problem Given a collection of numbers that might contain duplicates, return all possible unique permutations. Example: Input: [1,1,2] Output: [ [1,1,2], [1,2,1], [2,1,1] ] Solution Backtrack problem.
Framework of backtrack problem:
 choose a path selection pool return condition  ans = [] def backtrack(path, pool): if meet condition: ans.add(path) return for selection in pool: path.add(selection) backtrack(path, new_pool) path.remove(selection) Important:
Pay attention, you must add a copy of the path to result, not the path it self.</description>
    </item>
    
    <item>
      <title>200 - Number of Islands</title>
      <link>//alfmunny.com/leetcode-blog/posts/200-numebr-of-islands/</link>
      <pubDate>Fri, 17 Apr 2020 17:01:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/200-numebr-of-islands/</guid>
      <description>leetcode
Problem Given a 2d grid map of &amp;#39;1&amp;#39;s (land) and &amp;#39;0&amp;#39;s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water. Example 1: Input: 11110 11010 11000 00000 Output: 1 Example 2: Input: 11000 11000 00100 00011 Output: 3 Solution DFS problem. Straight forward.</description>
    </item>
    
    <item>
      <title>678 - Valid Parenthesis String</title>
      <link>//alfmunny.com/leetcode-blog/posts/678-valid-parenthesis-string/</link>
      <pubDate>Thu, 16 Apr 2020 23:07:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/678-valid-parenthesis-string/</guid>
      <description>leetcode
Problem Given a string containing only three types of characters: &amp;#39;(&amp;#39;, &amp;#39;)&amp;#39; and &amp;#39;*&amp;#39;, write a function to check whether this string is valid. We define the validity of a string by these rules: Any left parenthesis &amp;#39;(&amp;#39; must have a corresponding right parenthesis &amp;#39;)&amp;#39;. Any right parenthesis &amp;#39;)&amp;#39; must have a corresponding left parenthesis &amp;#39;(&amp;#39;. Left parenthesis &amp;#39;(&amp;#39; must go before the corresponding right parenthesis &amp;#39;)&amp;#39;. &amp;#39;*&amp;#39; could be treated as a single right parenthesis &amp;#39;)&amp;#39; or a single left parenthesis &amp;#39;(&amp;#39; or an empty string.</description>
    </item>
    
    <item>
      <title>Perform String Shifts</title>
      <link>//alfmunny.com/leetcode-blog/posts/perform-string-shifts/</link>
      <pubDate>Wed, 15 Apr 2020 00:24:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/perform-string-shifts/</guid>
      <description>leetcode
Problem You are given a string s containing lowercase English letters, and a matrix shift, where shift[i] = [direction, amount]: direction can be 0 (for left shift) or 1 (for right shift). amount is the amount by which string s is to be shifted. A left shift by 1 means remove the first character of s and append it to the end. Similarly, a right shift by 1 means remove the last character of s and add it to the beginning.</description>
    </item>
    
    <item>
      <title>525 - Contiguous Array</title>
      <link>//alfmunny.com/leetcode-blog/posts/525-contiguous-array/</link>
      <pubDate>Mon, 13 Apr 2020 23:06:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/525-contiguous-array/</guid>
      <description>leetcode
Problem Given a binary array, find the maximum length of a contiguous subarray with equal number of 0 and 1. Example 1: Input: [0,1] Output: 2 Explanation: [0, 1] is the longest contiguous subarray with equal number of 0 and 1. Example 2: Input: [0,1,0] Output: 2 Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1. Note: The length of the given binary array will not exceed 50,000.</description>
    </item>
    
    <item>
      <title>1046 - Last Stone Weight</title>
      <link>//alfmunny.com/leetcode-blog/posts/1046-last-stone-weight/</link>
      <pubDate>Mon, 13 Apr 2020 01:46:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/1046-last-stone-weight/</guid>
      <description>leetcode
Problem We have a collection of stones, each stone has a positive integer weight. Each turn, we choose the two heaviest stones and smash them together. Suppose the stones have weights x and y with x &amp;lt;= y. The result of this smash is: If x == y, both stones are totally destroyed; If x != y, the stone of weight x is totally destroyed, and the stone of weight y has new weight y-x.</description>
    </item>
    
    <item>
      <title>844 - Backspace String Compare</title>
      <link>//alfmunny.com/leetcode-blog/posts/844-backspace-string-compare/</link>
      <pubDate>Thu, 09 Apr 2020 22:52:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/844-backspace-string-compare/</guid>
      <description>leetcode
Problem Given two strings S and T, return if they are equal when both are typed into empty text editors. # means a backspace character. Example 1: Input: S = &amp;#34;ab#c&amp;#34;, T = &amp;#34;ad#c&amp;#34; Output: true Explanation: Both S and T become &amp;#34;ac&amp;#34;. Example 2: Input: S = &amp;#34;ab##&amp;#34;, T = &amp;#34;c#d#&amp;#34; Output: true Explanation: Both S and T become &amp;#34;&amp;#34;. Example 3: Input: S = &amp;#34;a##c&amp;#34;, T = &amp;#34;#a#c&amp;#34; Output: true Explanation: Both S and T become &amp;#34;c&amp;#34;.</description>
    </item>
    
    <item>
      <title>876 - Middle of the Linked List</title>
      <link>//alfmunny.com/leetcode-blog/posts/876-middle-of-the-linked-list/</link>
      <pubDate>Wed, 08 Apr 2020 11:28:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/876-middle-of-the-linked-list/</guid>
      <description>leetcode
Problem Given a non-empty, singly linked list with head node head, return a middle node of linked list. If there are two middle nodes, return the second middle node. Example 1: Input: [1,2,3,4,5] Output: Node 3 from this list (Serialization: [3,4,5]) The returned node has value 3. (The judge&amp;#39;s serialization of this node is [3,4,5]). Note that we returned a ListNode object ans, such that: ans.val = 3, ans.next.val = 4, ans.</description>
    </item>
    
    <item>
      <title>215 - Kth Largest Element in an Array</title>
      <link>//alfmunny.com/leetcode-blog/posts/215-kth-largest-element-in-an-array/</link>
      <pubDate>Mon, 06 Apr 2020 01:05:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/215-kth-largest-element-in-an-array/</guid>
      <description>leetcode
Problem 215. Kth Largest Element in an Array Medium 3152 222 Add to List Share Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element. Example 1: Input: [3,2,1,5,6,4] and k = 2 Output: 5 Example 2: Input: [3,2,3,1,2,4,5,5,6] and k = 4 Output: 4 Note: You may assume k is always valid, 1 ≤ k ≤ array&amp;#39;s length.</description>
    </item>
    
    <item>
      <title>416 - Partition Equal Subset Sum</title>
      <link>//alfmunny.com/leetcode-blog/posts/416-partition-equal-subset-sum/</link>
      <pubDate>Sun, 05 Apr 2020 21:20:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/416-partition-equal-subset-sum/</guid>
      <description>leetcode
Problem Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal. Note: Each of the array element will not exceed 100. The array size will not exceed 200. Example 1: Input: [1, 5, 11, 5] Output: true Explanation: The array can be partitioned as [1, 5, 5] and [11]. Example 2: Input: [1, 2, 3, 5] Output: false Explanation: The array cannot be partitioned into equal sum subsets.</description>
    </item>
    
    <item>
      <title>283 - Move Zeros</title>
      <link>//alfmunny.com/leetcode-blog/posts/283-move-zeros/</link>
      <pubDate>Sat, 04 Apr 2020 17:20:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/283-move-zeros/</guid>
      <description>leetcode
Problem Given an array nums, write a function to move all 0&amp;#39;s to the end of it while maintaining the relative order of the non-zero elements. Example: Input: [0,1,0,3,12] Output: [1,3,12,0,0] Note: You must do this in-place without making a copy of the array. Minimize the total number of operations. Solution Two pointers.
One pointer is for the start of 0.
One pointer keeps going forward.
class Solution: def moveZeros(self, nums): p1, p2 = 0, 0 for p2 &amp;lt; len(nums): if nums[p1] !</description>
    </item>
    
    <item>
      <title>494 - Target Sum</title>
      <link>//alfmunny.com/leetcode-blog/posts/494-target-sum/</link>
      <pubDate>Sat, 04 Apr 2020 16:24:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/494-target-sum/</guid>
      <description>leetcode
Problem You are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols + and -. For each integer, you should choose one from + and - as its new symbol. Find out how many ways to assign symbols to make sum of integers equal to target S. Example 1: Input: nums is [1, 1, 1, 1, 1], S is 3.</description>
    </item>
    
    <item>
      <title>338 - Counting Bits</title>
      <link>//alfmunny.com/leetcode-blog/posts/338-counting-bit/</link>
      <pubDate>Thu, 02 Apr 2020 17:03:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/338-counting-bit/</guid>
      <description>leetcode
Problem Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1&amp;#39;s in their binary representation and return them as an array. Example 1: Input: 2 Output: [0,1,1] Example 2: Input: 5 Output: [0,1,1,2,1,2] Notes DP problem
 States: index Transition:  dp[0] = 0 dp[1] = dp[1-1] + 1 = 1 dp[2] = dp[2-2] + 1 = 1 dp[3] = dp[3-2] + 1 = 2 dp[4] = dp[4-4] + 1 = 1 dp[5] = dp[5-4] + 1 = 2 dp[6] = dp[6-4] + 1 = 2 dp[7] = dp[7-4] + 1 = 3 dp[8] = dp[8-8] + 1 = 1 dp[9] = dp[9-8] + 1 = 2 dp[i] = dp[i - log_2 (i)] + 1 A trick using bit manipulation: 8 -&amp;gt; 1000 9 -&amp;gt; 1001 10 -&amp;gt; 1010 9 &amp;amp; 8 -&amp;gt; 1001 &amp;amp; 1000 -&amp;gt; 1000 dp[8] + 1 = 2 10 &amp;amp; 9 -&amp;gt; 1010 &amp;amp; 1001 -&amp;gt; 1000 dp[8] + 1 = 2 11 &amp;amp; 10 -&amp;gt; 1011 &amp;amp; 1010 -&amp;gt; 1010 dp[10] + 1 = 3 12 &amp;amp; 11 -&amp;gt; 1100 &amp;amp; 1011 -&amp;gt; 1000 dp[8] + 1 = 2 dp[i] = dp[i &amp;amp; (i-1)] + 1 Solution Solution 1: DP class Solution: def countBits(self, num): offset = 1 dp = [0] * (num + 1) for i in range(1, num + 1): if offset * 2 == i: offset *= 2 dp[i] = dp[i - offset] + 1 return dp Solution 2: Bit manipulation on couting bits class Solution: def countBits(self, num): dp = [0] * (num + 1) for i in range(1, num + 1): dp[i] = dp[i &amp;amp; (i - 1)] + 1 return dp Solution 3: class Solution(object): def countBits(self, num): res=[0] while len(res)&amp;lt;=num: res+=[i+1 for i in res] return res[:num+1] Solution 4: class Solution: def countBits(self, num): dp = [0] * (num + 1) for i in range(1, num+1): if not i % 2: dp[i] = dp[i &amp;gt;&amp;gt; 1] else: dp[i] = dp[i &amp;gt;&amp;gt; 1] + 1 return dp[num] </description>
    </item>
    
    <item>
      <title>202 - Happy Number</title>
      <link>//alfmunny.com/leetcode-blog/posts/202-happy-number/</link>
      <pubDate>Thu, 02 Apr 2020 16:03:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/202-happy-number/</guid>
      <description>leetcode
Problem Write an algorithm to determine if a number is &amp;#34;happy&amp;#34;. A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.</description>
    </item>
    
    <item>
      <title>136 - Single Number</title>
      <link>//alfmunny.com/leetcode-blog/posts/136-single-number/</link>
      <pubDate>Wed, 01 Apr 2020 22:36:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/136-single-number/</guid>
      <description>leetcode
Problem Given a non-empty array of integers, every element appears twice except for one. Find that single one. Note: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory? Example 1: Input: [2,2,1] Output: 1 Example 2: Input: [4,1,2,1,2] Output: 4 Notes Solution 1: Hash Table Solution 2: Bit manipulation Consider XOR all element together. The left number is the single number.
Solution Solution 1: Hash Table class Solution: def singleNumber(self, nums): table = {} for i in nums: table[i] = table.</description>
    </item>
    
    <item>
      <title>5 - Longest Palindromic Substring</title>
      <link>//alfmunny.com/leetcode-blog/posts/5-longest-palindromic-substring/</link>
      <pubDate>Tue, 31 Mar 2020 23:57:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/5-longest-palindromic-substring/</guid>
      <description>leetcode
Problem Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000. Example 1: Input: &amp;#34;babad&amp;#34; Output: &amp;#34;bab&amp;#34; Note: &amp;#34;aba&amp;#34; is also a valid answer. Example 2: Input: &amp;#34;cbbd&amp;#34; Output: &amp;#34;bb&amp;#34; Notes DP problem
  States:
left_index, right_index, mark if s[left_index, right_index+1] is palindromic
  Transition:
if s[l] == s[r]: # mark it only when both ends are same values dp[l][r] = 1 if r == l # if only one element dp[l][r] = 1 if r+1 == l # if only two elements dp[l][r] = 1 if dp[l+1][r+1] = 1 # if the string in between is palindromic results = s[l:r+1] if r-l+1&amp;gt;len(results) # comparing the length, record the maximum   Base case:</description>
    </item>
    
    <item>
      <title>647 - Palindromic Substrings</title>
      <link>//alfmunny.com/leetcode-blog/posts/647-palindromic-substrings/</link>
      <pubDate>Tue, 31 Mar 2020 23:41:02 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/647-palindromic-substrings/</guid>
      <description>leetcode
Problem Given a string, your task is to count how many palindromic substrings in this string. The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters. Example 1: Input: &amp;#34;abc&amp;#34; Output: 3 Explanation: Three palindromic strings: &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;. Example 2: Input: &amp;#34;aaa&amp;#34; Output: 6 Explanation: Six palindromic strings: &amp;#34;a&amp;#34;, &amp;#34;a&amp;#34;, &amp;#34;a&amp;#34;, &amp;#34;aa&amp;#34;, &amp;#34;aa&amp;#34;, &amp;#34;aaa&amp;#34;. Note: The input string length won&amp;#39;t exceed 1000.</description>
    </item>
    
    <item>
      <title>279 - Perfect Squares</title>
      <link>//alfmunny.com/leetcode-blog/posts/279-perfect-squares/</link>
      <pubDate>Tue, 31 Mar 2020 00:13:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/279-perfect-squares/</guid>
      <description>leetcode
Problem Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n. Example 1: Input: n = 12 Output: 3 Explanation: 12 = 4 + 4 + 4. Example 2: Input: n = 13 Output: 2 Explanation: 13 = 4 + 9. Notes DP problem
  States: n
  Transition:
  dp[i] = min([_dp[i-j*j]+1 if i-j*j &amp;gt;= 0 else break for j in range(1, sqrt(i)+1)])   Base case:</description>
    </item>
    
    <item>
      <title>221 - Maximal Square</title>
      <link>//alfmunny.com/leetcode-blog/posts/221-maximal-square/</link>
      <pubDate>Mon, 30 Mar 2020 20:21:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/221-maximal-square/</guid>
      <description>leetcode
Problem Given a 2D binary matrix filled with 0&amp;#39;s and 1&amp;#39;s, find the largest square containing only 1&amp;#39;s and return its area. Example: Input: 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 Output: 4 Notes DP Problem:
  States:
 position -&amp;gt; [i][j] how many continues 1 in vertical direction -&amp;gt; [i][j][0] how many continues 1 in horizontal direction -&amp;gt; [i][j][1] square value(or the length of the square) -&amp;gt; [i][j][2]  dp[i][j][0 or 1 or 2]</description>
    </item>
    
    <item>
      <title>152 - Maximum Product Subarray</title>
      <link>//alfmunny.com/leetcode-blog/posts/152-maximum-product-subarray/</link>
      <pubDate>Sun, 29 Mar 2020 17:40:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/152-maximum-product-subarray/</guid>
      <description>leetcode
Problem Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product. Example 1: Input: [2,3,-2,4] Output: 6 Explanation: [2,3] has the largest product 6. Example 2: Input: [-2,0,-1] Output: 0 Explanation: The result cannot be 2, because [-2,-1] is not a subarray. Notes DP problem:
  States: We have to know two previous states to deduct the current max product:</description>
    </item>
    
    <item>
      <title>322 - Coin Change</title>
      <link>//alfmunny.com/leetcode-blog/posts/322-coin-change/</link>
      <pubDate>Sat, 28 Mar 2020 02:17:00 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/322-coin-change/</guid>
      <description>leetcode
Problem You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1. Example 1: Input: coins = [1, 2, 5], amount = 11 Output: 3 Explanation: 11 = 5 + 5 + 1 Example 2: Input: coins = [2], amount = 3 Output: -1 Note: You may assume that you have an infinite number of each kind of coin.</description>
    </item>
    
    <item>
      <title>300 - Longest Increasing Subsequence</title>
      <link>//alfmunny.com/leetcode-blog/posts/300-longest-increasing-subsequence/</link>
      <pubDate>Sat, 28 Mar 2020 00:08:00 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/300-longest-increasing-subsequence/</guid>
      <description>leetcode
Problem Given an unsorted array of integers, find the length of longest increasing subsequence. Example: Input: [10,9,2,5,3,7,101,18] Output: 4 Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. Note: There may be more than one LIS combination, it is only necessary for you to return the length. Your algorithm should run in O(n2) complexity. Follow up: Could you improve it to O(n log n) time complexity? Solution DP problem.</description>
    </item>
    
    <item>
      <title>198 - House Robber</title>
      <link>//alfmunny.com/leetcode-blog/posts/198-house-robber/</link>
      <pubDate>Fri, 27 Mar 2020 23:58:00 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/198-house-robber/</guid>
      <description>leetcode
Problem You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night. Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.</description>
    </item>
    
    <item>
      <title>91 - Decode Ways</title>
      <link>//alfmunny.com/leetcode-blog/posts/91-decode-ways/</link>
      <pubDate>Wed, 25 Mar 2020 23:44:20 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/91-decode-ways/</guid>
      <description>leetcode
Problem A message containing letters from A-Z is being encoded to numbers using the following mapping: &amp;#39;A&amp;#39; -&amp;gt; 1 &amp;#39;B&amp;#39; -&amp;gt; 2 ... &amp;#39;Z&amp;#39; -&amp;gt; 26 Given a non-empty string containing only digits, determine the total number of ways to decode it. Example 1: Input: &amp;#34;12&amp;#34; Output: 2 Explanation: It could be decoded as &amp;#34;AB&amp;#34; (1 2) or &amp;#34;L&amp;#34; (12). Example 2: Input: &amp;#34;226&amp;#34; Output: 3 Explanation: It could be decoded as &amp;#34;BZ&amp;#34; (2 26), &amp;#34;VF&amp;#34; (22 6), or &amp;#34;BBF&amp;#34; (2 2 6).</description>
    </item>
    
    <item>
      <title>309 - Best Time to Buy and Sell Stock with Cooldown</title>
      <link>//alfmunny.com/leetcode-blog/posts/309-best-time-to-buy-and-sell-stock-with-cooldown/</link>
      <pubDate>Tue, 24 Mar 2020 22:36:00 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/309-best-time-to-buy-and-sell-stock-with-cooldown/</guid>
      <description>leetcode
Problem Say you have an array for which the ith element is the price of a given stock on day i. Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions: You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</description>
    </item>
    
    <item>
      <title>188 - Best Time to Buy and Sell Stock IV</title>
      <link>//alfmunny.com/leetcode-blog/posts/188-best-time-to-buy-and-sell-stock-iv/</link>
      <pubDate>Tue, 24 Mar 2020 21:46:00 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/188-best-time-to-buy-and-sell-stock-iv/</guid>
      <description>leetcode
Problem Say you have an array for which the i-th element is the price of a given stock on day i. Design an algorithm to find the maximum profit. You may complete at most k transactions. Note: You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again). Example 1: Input: [2,4,1], k = 2 Output: 2 Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.</description>
    </item>
    
    <item>
      <title>123 - Best Time to Buy and Sell Stock III</title>
      <link>//alfmunny.com/leetcode-blog/posts/123-best-time-to-buy-and-sell-stock-iii/</link>
      <pubDate>Tue, 24 Mar 2020 18:25:00 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/123-best-time-to-buy-and-sell-stock-iii/</guid>
      <description>leetcode
Problem Say you have an array for which the ith element is the price of a given stock on day i. Design an algorithm to find the maximum profit. You may complete at most two transactions. Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again). Example 1: Input: [3,3,5,0,0,3,1,4] Output: 6 Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.</description>
    </item>
    
    <item>
      <title>122 - Best Time to Buy and Sell Stock II</title>
      <link>//alfmunny.com/leetcode-blog/posts/122-best-time-to-buy-and-sell-stock-ii/</link>
      <pubDate>Tue, 24 Mar 2020 15:26:00 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/122-best-time-to-buy-and-sell-stock-ii/</guid>
      <description>leetcode
Problem Say you have an array for which the ith element is the price of a given stock on day i. Design an algorithm to find the maximum profit. You may complete as many transactions as you like Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again). Example 1: Input: [7,1,5,3,6,4] Output: 7 Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.</description>
    </item>
    
    <item>
      <title>121 - Best Time to Buy and Sell Stock</title>
      <link>//alfmunny.com/leetcode-blog/posts/121-best-time-to-buy-and-sell-stock/</link>
      <pubDate>Tue, 24 Mar 2020 12:13:00 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/121-best-time-to-buy-and-sell-stock/</guid>
      <description>leetcode
Problem Say you have an array for which the ith element is the price of a given stock on day i. If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit. Note that you cannot sell a stock before you buy one. Example 1: Input: [7,1,5,3,6,4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.</description>
    </item>
    
    <item>
      <title>85 - Maximal Rectangle</title>
      <link>//alfmunny.com/leetcode-blog/posts/85-maximal-rectangle/</link>
      <pubDate>Tue, 24 Mar 2020 00:57:00 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/85-maximal-rectangle/</guid>
      <description>Problem Notes Solution  leetcode
Problem Given a 2D binary matrix filled with 0&amp;#39;s and 1&amp;#39;s, find the largest rectangle containing only 1&amp;#39;s and return its area. Example: Input: [ [&amp;#34;1&amp;#34;,&amp;#34;0&amp;#34;,&amp;#34;1&amp;#34;,&amp;#34;0&amp;#34;,&amp;#34;0&amp;#34;], [&amp;#34;1&amp;#34;,&amp;#34;0&amp;#34;,&amp;#34;1&amp;#34;,&amp;#34;1&amp;#34;,&amp;#34;1&amp;#34;], [&amp;#34;1&amp;#34;,&amp;#34;1&amp;#34;,&amp;#34;1&amp;#34;,&amp;#34;1&amp;#34;,&amp;#34;1&amp;#34;], [&amp;#34;1&amp;#34;,&amp;#34;0&amp;#34;,&amp;#34;0&amp;#34;,&amp;#34;1&amp;#34;,&amp;#34;0&amp;#34;] ] Output: 6 Notes Two parts:
 generate a heights histogram for every row. apple &amp;ldquo;largest rectangle in histogram&amp;rdquo; on each row of histogram  Solution class Solution: def maximalRectangle(self, matrix): if not matrix or not matrix[0]: return 0 m = len(matrix) n = len(matrix[0]) histograms = [[0] * n for i in range(m)] res = 0 for i in range(m): for j in range(n): if matrix[i][j] == &amp;#34;1&amp;#34;: histograms[i][j] = histograms[i - 1][j] + 1 if i &amp;gt; 0 else 1 for histogram in histograms: res = max(res, self.</description>
    </item>
    
    <item>
      <title>84 - Largest Rectangle in Histogram</title>
      <link>//alfmunny.com/leetcode-blog/posts/84-largest-rectangle-in-histogram/</link>
      <pubDate>Mon, 23 Mar 2020 00:36:00 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/84-largest-rectangle-in-histogram/</guid>
      <description>leetcode
Problem Given n non-negative integers representing the histogram&amp;#39;s bar height where the width of each bar is 1, find the area of largest rectangle in the histogram. Example: Input: [2,1,5,6,2,3] Output: 10 Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].
The largest rectangle is shown in the shaded area, which has area = 10 unit.
Notes Main idea is to caculate both left edge and right edge for every entry in the array</description>
    </item>
    
    <item>
      <title>1306 - Jump Game III</title>
      <link>//alfmunny.com/leetcode-blog/posts/1306-jump-game-iii/</link>
      <pubDate>Sun, 22 Mar 2020 20:42:00 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/1306-jump-game-iii/</guid>
      <description>leetcode
Problem Given an array of non-negative integers arr, you are initially positioned at start index of the array. When you are at index i, you can jump to i + arr[i] or i - arr[i], check if you can reach to any index with value 0. Notice that you can not jump outside of the array at any time. Example 1: Input: arr = [4,2,3,0,3,1,2], start = 5 Output: true Explanation: All possible ways to reach at index 3 with value 0 are: index 5 -&amp;gt; index 4 -&amp;gt; index 1 -&amp;gt; index 3 index 5 -&amp;gt; index 6 -&amp;gt; index 4 -&amp;gt; index 1 -&amp;gt; index 3 Example 2: Input: arr = [4,2,3,0,3,1,2], start = 0 Output: true Explanation: One possible way to reach at index 3 with value 0 is: index 0 -&amp;gt; index 4 -&amp;gt; index 1 -&amp;gt; index 3 Example 3: Input: arr = [3,0,2,1,2], start = 2 Output: false Explanation: There is no way to reach at index 1 with value 0.</description>
    </item>
    
    <item>
      <title>45 - Jump Game II</title>
      <link>//alfmunny.com/leetcode-blog/posts/45-jump-game-ii/</link>
      <pubDate>Sun, 22 Mar 2020 00:55:00 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/45-jump-game-ii/</guid>
      <description>leetcode
Problem Given an array of non-negative integers, you are initially positioned at the first index of the array. Each element in the array represents your maximum jump length at that position. Your goal is to reach the last index in the minimum number of jumps. Example: Input: [2,3,1,1,4] Output: 2 Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.</description>
    </item>
    
    <item>
      <title>62 - Unique Paths</title>
      <link>//alfmunny.com/leetcode-blog/posts/62-unique-paths/</link>
      <pubDate>Sat, 21 Mar 2020 22:34:22 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/62-unique-paths/</guid>
      <description>leetcode
Problem A robot is located at the top-left corner of a m x n grid (marked &amp;#39;Start&amp;#39; in the diagram below). The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked &amp;#39;Finish&amp;#39; in the diagram below). How many possible unique paths are there? Note: m and n will be at most 100. Example 1: Input: m = 3, n = 2 Output: 3 Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner: 1.</description>
    </item>
    
    <item>
      <title>509 - Fibonacci Number</title>
      <link>//alfmunny.com/leetcode-blog/posts/509-fibonacci-number/</link>
      <pubDate>Sat, 21 Mar 2020 22:31:20 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/509-fibonacci-number/</guid>
      <description>leetcode
Problem The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is, F(0) = 0, F(1) = 1 F(N) = F(N - 1) + F(N - 2), for N &amp;gt; 1. Given N, calculate F(N). Example 1: Input: 2 Output: 1 Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.</description>
    </item>
    
    <item>
      <title>91 - Decode Ways</title>
      <link>//alfmunny.com/leetcode-blog/posts/90-decode-ways/</link>
      <pubDate>Sat, 21 Mar 2020 22:28:56 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/90-decode-ways/</guid>
      <description>leetcode
Problem A message containing letters from A-Z is being encoded to numbers using the following mapping: &amp;#39;A&amp;#39; -&amp;gt; 1 &amp;#39;B&amp;#39; -&amp;gt; 2 ... &amp;#39;Z&amp;#39; -&amp;gt; 26 Given a non-empty string containing only digits, determine the total number of ways to decode it. Example 1: Input: &amp;#34;12&amp;#34; Output: 2 Explanation: It could be decoded as &amp;#34;AB&amp;#34; (1 2) or &amp;#34;L&amp;#34; (12). Example 2: Input: &amp;#34;226&amp;#34; Output: 3 Explanation: It could be decoded as &amp;#34;BZ&amp;#34; (2 26), &amp;#34;VF&amp;#34; (22 6), or &amp;#34;BBF&amp;#34; (2 2 6).</description>
    </item>
    
    <item>
      <title>70 - Climbing Stairs</title>
      <link>//alfmunny.com/leetcode-blog/posts/70-climbing-stairs/</link>
      <pubDate>Sat, 21 Mar 2020 22:25:51 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/70-climbing-stairs/</guid>
      <description>leetcode
Problem You are climbing a stair case. It takes n steps to reach to the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top? Note: Given n will be a positive integer. Example 1: Input: 2 Output: 2 Explanation: There are two ways to climb to the top. 1. 1 step + 1 step 2. 2 steps Example 2: Input: 3 Output: 3 Explanation: There are three ways to climb to the top.</description>
    </item>
    
    <item>
      <title>55 - Jump Game</title>
      <link>//alfmunny.com/leetcode-blog/posts/55-jump-game/</link>
      <pubDate>Sat, 21 Mar 2020 22:19:29 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/55-jump-game/</guid>
      <description>leetcode
Problem Given an array of non-negative integers, you are initially positioned at the first index of the array. Each element in the array represents your maximum jump length at that position. Determine if you are able to reach the last index. Example 1: Input: [2,3,1,1,4] Output: true Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index. Example 2: Input: [3,2,1,0,4] Output: false Explanation: You will always arrive at index 3 no matter what.</description>
    </item>
    
    <item>
      <title>53 - Maximum Subarray</title>
      <link>//alfmunny.com/leetcode-blog/posts/53-maximum-subarray/</link>
      <pubDate>Sat, 21 Mar 2020 22:16:34 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/53-maximum-subarray/</guid>
      <description>leetcode
Problem Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. Example: Input: [-2,1,-3,4,-1,2,1,-5,4], Output: 6 Explanation: [4,-1,2,1] has the largest sum = 6. Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle. Notes Dynamic programming problem.
Use nums[i] always store the maximum sum.</description>
    </item>
    
    <item>
      <title>48 - Rotate Image</title>
      <link>//alfmunny.com/leetcode-blog/posts/48-rotate-image/</link>
      <pubDate>Sat, 21 Mar 2020 22:16:23 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/48-rotate-image/</guid>
      <description>leetcode
Problem You are given an n x n 2D matrix representing an image. Rotate the image by 90 degrees (clockwise). Note: You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation. Example 1: Given input matrix = [ [1,2,3], [4,5,6], [7,8,9] ], rotate the input matrix in-place such that it becomes: [ [7,4,1], [8,5,2], [9,6,3] ] Example 2: Given input matrix = [ [ 5, 1, 9,11], [ 2, 4, 8,10], [13, 3, 6, 7], [15,14,12,16] ], rotate the input matrix in-place such that it becomes: [ [15,13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7,10,11] ] Notes Naive solution, to do it one by one.</description>
    </item>
    
    <item>
      <title>41 - First Missing Positive</title>
      <link>//alfmunny.com/leetcode-blog/posts/41-first-missing-positive/</link>
      <pubDate>Sat, 21 Mar 2020 16:29:53 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/41-first-missing-positive/</guid>
      <description>Problem Given an unsorted integer array, find the smallest missing positive integer. Example 1: Input: [1,2,0] Output: 3 Example 2: Input: [3,4,-1,1] Output: 2 Example 3: Input: [7,8,9,11,12] Output: 1 Note: Your algorithm should run in O(n) time and uses constant extra space. Notes Run in O(n) time and uses constant extra space
  Say the length of the array is l, the number must be in 1&amp;hellip;l+1 (also l possible numbers)</description>
    </item>
    
    <item>
      <title>79 - Word Search</title>
      <link>//alfmunny.com/leetcode-blog/posts/79-word-search/</link>
      <pubDate>Sat, 14 Mar 2020 03:00:00 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/79-word-search/</guid>
      <description>leetcode
Problem Given a 2D board and a word, find if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cell, where &amp;#34;adjacent&amp;#34; cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once. Example: board = [ [&amp;#39;A&amp;#39;,&amp;#39;B&amp;#39;,&amp;#39;C&amp;#39;,&amp;#39;E&amp;#39;], [&amp;#39;S&amp;#39;,&amp;#39;F&amp;#39;,&amp;#39;C&amp;#39;,&amp;#39;S&amp;#39;], [&amp;#39;A&amp;#39;,&amp;#39;D&amp;#39;,&amp;#39;E&amp;#39;,&amp;#39;E&amp;#39;] ] Given word = &amp;#34;ABCCED&amp;#34;, return true. Given word = &amp;#34;SEE&amp;#34;, return true. Given word = &amp;#34;ABCB&amp;#34;, return false.</description>
    </item>
    
    <item>
      <title>78 - Subsets</title>
      <link>//alfmunny.com/leetcode-blog/posts/78-subsets/</link>
      <pubDate>Sat, 07 Mar 2020 23:59:00 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/78-subsets/</guid>
      <description>Problem leetcode
Given a set of distinct integers, nums, return all possible subsets (the power set). Note: The solution set must not contain duplicate subsets. Example: Input: nums = [1,2,3] Output: [ [3], [1], [2], [1,2,3], [1,3], [2,3], [1,2], [] ] Notes Three strategies to solve a subset problem:
Recursion, Backtracking, Bitmask
Recursion Iterative version:
Start from empty array [[]]. Step 1: Take 1 into consideration, and add 1 to existing array [[], [1]] Step 2: Take 2 into consideration, and add 2 to existing array [[], [1], [2], [1, 2]] Step 3: Take 3 into consideration, and add 3 to existing array [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]] DFS version:</description>
    </item>
    
    <item>
      <title>75 - Sort Colors</title>
      <link>//alfmunny.com/leetcode-blog/posts/75-sort-colors/</link>
      <pubDate>Fri, 06 Mar 2020 17:26:00 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/75-sort-colors/</guid>
      <description>leetcode
Problem Given an array with n objects colored red, white or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white and blue. Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively. Note: You are not suppose to use the library&amp;#39;s sort function for this problem. Example: Input: [2,0,2,1,1,0] Output: [0,0,1,1,2,2] Follow up: A rather straight forward solution is a two-pass algorithm using counting sort.</description>
    </item>
    
    <item>
      <title>64 - Minimum Path Sum</title>
      <link>//alfmunny.com/leetcode-blog/posts/64-mnimum-path-sum/</link>
      <pubDate>Wed, 04 Mar 2020 18:47:00 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/64-mnimum-path-sum/</guid>
      <description>leetcode
Problem Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path. Note: You can only move either down or right at any point in time. Example: Input: [ [1,3,1], [1,5,1], [4,2,1] ] Output: 7 Explanation: Because the path 1→3→1→1→1 minimizes the sum. Notes Thinking: It seems to be a greedy algorithm problem.</description>
    </item>
    
  </channel>
</rss>