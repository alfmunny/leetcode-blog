<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bfs on LeetCode In The Shell</title>
    <link>//alfmunny.com/leetcode-blog/tags/bfs/</link>
    <description>Recent content in bfs on LeetCode In The Shell</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 29 Dec 2020 21:51:00 +0100</lastBuildDate><atom:link href="//alfmunny.com/leetcode-blog/tags/bfs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>515 - Find Largest Value in Each Tree Row</title>
      <link>//alfmunny.com/leetcode-blog/posts/515-find-largest-value-in-each-tree-row/</link>
      <pubDate>Tue, 29 Dec 2020 21:51:00 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/515-find-largest-value-in-each-tree-row/</guid>
      <description>leetcode
Problem Given the root of a binary tree, return an array of the largest value in each row of the tree (0-indexed). Solution class Solution: def largestValues(self, root: TreeNode) -&amp;gt; List[int]: if not root: return [] ans = [] level = [root] seen = set(level) while level: new_level = [] max_val = -float(&amp;#39;inf&amp;#39;) for node in level: if node: if node.left: new_level.append(node.left) if node.right: new_level.append(node.right) max_val = max(max_val, node.val) ans.</description>
    </item>
    
    <item>
      <title>863 - All Nodes Distance K in Binary Tree</title>
      <link>//alfmunny.com/leetcode-blog/posts/863-all-nodes-distance-k-in-binary-tree/</link>
      <pubDate>Mon, 28 Dec 2020 00:06:00 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/863-all-nodes-distance-k-in-binary-tree/</guid>
      <description>leetcode
Problem We are given a binary tree (with root node root), a target node, and an integer value K. Return a list of the values of all nodes that have a distance K from the target node. The answer can be returned in any order. Example 1: Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2 Output: [7,4,1] Explanation: The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1.</description>
    </item>
    
    <item>
      <title>126 - Word Ladder II</title>
      <link>//alfmunny.com/leetcode-blog/posts/126-word-ladder-ii/</link>
      <pubDate>Sun, 22 Nov 2020 00:36:00 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/126-word-ladder-ii/</guid>
      <description>leetcode
Problem Given two words (beginWord and endWord), and a dictionary&amp;#39;s word list, find all shortest transformation sequence(s) from beginWord to endWord, such that: Only one letter can be changed at a time Each transformed word must exist in the word list. Note that beginWord is not a transformed word. Note: Return an empty list if there is no such transformation sequence. All words have the same length. All words contain only lowercase alphabetic characters.</description>
    </item>
    
    <item>
      <title>107 - Binary Tree Level Order Traversal II</title>
      <link>//alfmunny.com/leetcode-blog/posts/107-binary-tree-level-order-traversal-ii/</link>
      <pubDate>Fri, 03 Jul 2020 22:13:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/107-binary-tree-level-order-traversal-ii/</guid>
      <description>leetcode
Problem Given a binary tree, return the bottom-up level order traversal of its nodes&amp;#39; values. (ie, from left to right, level by level from leaf to root). For example: Given binary tree [3,9,20,null,null,15,7], 3 / \ 9 20 / \ 15 7 return its bottom-up level order traversal as: [ [15,7], [9,20], [3] ] Solution class Solution: def levelOrderBottom(self, root: TreeNode) -&amp;gt; List[List[int]]: if not root: return [] queue = [root] stack = [] while queue: next_queue = [] tmp = [] while queue: n = queue.</description>
    </item>
    
    <item>
      <title>210 - Course Schedule II</title>
      <link>//alfmunny.com/leetcode-blog/posts/210-course-schedule-ii/</link>
      <pubDate>Fri, 29 May 2020 20:45:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/210-course-schedule-ii/</guid>
      <description>leetcode
Problem There are a total of n courses you have to take, labeled from 0 to n-1. Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1] Given the total number of courses and a list of prerequisite pairs, return the ordering of courses you should take to finish all courses. There may be multiple correct orders, you just need to return one of them.</description>
    </item>
    
    <item>
      <title>45 - Jump Game II</title>
      <link>//alfmunny.com/leetcode-blog/posts/45-jump-game-ii/</link>
      <pubDate>Sun, 22 Mar 2020 00:55:00 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/45-jump-game-ii/</guid>
      <description>leetcode
Problem Given an array of non-negative integers, you are initially positioned at the first index of the array. Each element in the array represents your maximum jump length at that position. Your goal is to reach the last index in the minimum number of jumps. Example: Input: [2,3,1,1,4] Output: 2 Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.</description>
    </item>
    
  </channel>
</rss>
