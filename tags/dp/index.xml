<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dp on LeetCode In The Shell</title>
    <link>//alfmunny.com/leetcode-blog/tags/dp/</link>
    <description>Recent content in dp on LeetCode In The Shell</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Jul 2020 02:20:00 +0200</lastBuildDate>
    
	<atom:link href="//alfmunny.com/leetcode-blog/tags/dp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>10 - Regular Expression Matching</title>
      <link>//alfmunny.com/leetcode-blog/posts/10-regular-expression-matching/</link>
      <pubDate>Fri, 10 Jul 2020 02:20:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/10-regular-expression-matching/</guid>
      <description>leetcode
Problem Given an input string (s) and a pattern (p), implement regular expression matching with support for &amp;#39;.&amp;#39; and &amp;#39;*&amp;#39;. &amp;#39;.&amp;#39; Matches any single character. &amp;#39;*&amp;#39; Matches zero or more of the preceding element. The matching should cover the entire input string (not partial). Note: s could be empty and contains only lowercase letters a-z. p could be empty and contains only lowercase letters a-z, and characters like . or *.</description>
    </item>
    
    <item>
      <title>303 - Range Sum Query - Immutable</title>
      <link>//alfmunny.com/leetcode-blog/posts/303-range-sum-query-immutable/</link>
      <pubDate>Sat, 27 Jun 2020 15:52:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/303-range-sum-query-immutable/</guid>
      <description>leetcode
Problem Given an integer array nums, find the sum of the elements between indices i and j (i â‰¤ j), inclusive. Example: Given nums = [-2, 0, 3, -5, 2, -1] sumRange(0, 2) -&amp;gt; 1 sumRange(2, 5) -&amp;gt; -1 sumRange(0, 5) -&amp;gt; -3 Note: You may assume that the array does not change. There are many calls to sumRange function. Solution class NumArray: def __init__(self, nums: List[int]): self.dp = list(nums) self.</description>
    </item>
    
    <item>
      <title>63 - Unique Paths II</title>
      <link>//alfmunny.com/leetcode-blog/posts/63-unique-paths-ii/</link>
      <pubDate>Thu, 18 Jun 2020 14:25:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/63-unique-paths-ii/</guid>
      <description>leetcode
Problem A robot is located at the top-left corner of a m x n grid (marked &amp;#39;Start&amp;#39; in the diagram below). The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked &amp;#39;Finish&amp;#39; in the diagram below). Now consider if some obstacles are added to the grids. How many unique paths would there be?</description>
    </item>
    
    <item>
      <title>377 - Combination Sum IV</title>
      <link>//alfmunny.com/leetcode-blog/posts/337-combination-sum-iv/</link>
      <pubDate>Thu, 11 Jun 2020 15:12:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/337-combination-sum-iv/</guid>
      <description>leetcode
Problem Given an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target. Example: nums = [1, 2, 3] target = 4 The possible combination ways are: (1, 1, 1, 1) (1, 1, 2) (1, 2, 1) (1, 3) (2, 1, 1) (2, 2) (3, 1) Note that different sequences are counted as different combinations. Therefore the output is 7.</description>
    </item>
    
    <item>
      <title>213 - House Robber II</title>
      <link>//alfmunny.com/leetcode-blog/posts/213-house-robber-ii/</link>
      <pubDate>Mon, 08 Jun 2020 23:24:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/213-house-robber-ii/</guid>
      <description>leetcode
Problem You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night. Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.</description>
    </item>
    
    <item>
      <title>518 - Coin Change 2</title>
      <link>//alfmunny.com/leetcode-blog/posts/518-coin-change-2/</link>
      <pubDate>Sun, 07 Jun 2020 21:47:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/518-coin-change-2/</guid>
      <description>leetcode
Problem You are given coins of different denominations and a total amount of money. Write a function to compute the number of combinations that make up that amount. You may assume that you have infinite number of each kind of coin. Example 1: Input: amount = 5, coins = [1, 2, 5] Output: 4 Explanation: there are four ways to make up the amount: 5=5 5=2+2+1 5=2+1+1+1 5=1+1+1+1+1 Example 2: Input: amount = 3, coins = [2] Output: 0 Explanation: the amount of 3 cannot be made up just with coins of 2.</description>
    </item>
    
    <item>
      <title>746 - Min Cost Climbing Stairs</title>
      <link>//alfmunny.com/leetcode-blog/posts/746-min-cost-climbing-stairs/</link>
      <pubDate>Tue, 02 Jun 2020 00:16:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/746-min-cost-climbing-stairs/</guid>
      <description>leetcode
Problem On a staircase, the i-th step has some non-negative cost cost[i] assigned (0 indexed). Once you pay the cost, you can either climb one or two steps. You need to find minimum cost to reach the top of the floor, and you can either start from the step with index 0, or the step with index 1. Example 1: Input: cost = [10, 15, 20] Output: 15 Explanation: Cheapest is start on cost[1], pay that cost and go to the top.</description>
    </item>
    
    <item>
      <title>72 - Edit Distance</title>
      <link>//alfmunny.com/leetcode-blog/posts/72-edit-distance/</link>
      <pubDate>Sun, 31 May 2020 17:58:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/72-edit-distance/</guid>
      <description>leetcode
Problem Given two words word1 and word2, find the minimum number of operations required to convert word1 to word2. You have the following 3 operations permitted on a word: Insert a character Delete a character Replace a character Example 1: Input: word1 = &amp;#34;horse&amp;#34;, word2 = &amp;#34;ros&amp;#34; Output: 3 Explanation: horse -&amp;gt; rorse (replace &amp;#39;h&amp;#39; with &amp;#39;r&amp;#39;) rorse -&amp;gt; rose (remove &amp;#39;r&amp;#39;) rose -&amp;gt; ros (remove &amp;#39;e&amp;#39;) Example 2: Input: word1 = &amp;#34;intention&amp;#34;, word2 = &amp;#34;execution&amp;#34; Output: 5 Explanation: intention -&amp;gt; inention (remove &amp;#39;t&amp;#39;) inention -&amp;gt; enention (replace &amp;#39;i&amp;#39; with &amp;#39;e&amp;#39;) enention -&amp;gt; exention (replace &amp;#39;n&amp;#39; with &amp;#39;x&amp;#39;) exention -&amp;gt; exection (replace &amp;#39;n&amp;#39; with &amp;#39;c&amp;#39;) exection -&amp;gt; execution (insert &amp;#39;u&amp;#39;) Solution class Solution: def minDistance(self, word1: str, word2: str) -&amp;gt; int: dp = [[0] * (1+len(word2)) for _ in range(1+len(word1))] for i in range(1+len(word1)): dp[i][0] = i for j in range(1+len(word2)): dp[0][j] = j for i in range(1, 1+len(word1)): for j in range(1, 1+len(word2)): if word1[i-1] == word2[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i][j-1]) + 1 return dp[-1][-1] </description>
    </item>
    
    <item>
      <title>1035 - Uncrossed Lines</title>
      <link>//alfmunny.com/leetcode-blog/posts/1035-uncrossed-lines/</link>
      <pubDate>Mon, 25 May 2020 16:38:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/1035-uncrossed-lines/</guid>
      <description>leetcode
Problem We write the integers of A and B (in the order they are given) on two separate horizontal lines. Now, we may draw connecting lines: a straight line connecting two numbers A[i] and B[j] such that: A[i] == B[j]; The line we draw does not intersect any other connecting (non-horizontal) line. Note that a connecting lines cannot intersect even at the endpoints: each number can only belong to one connecting line.</description>
    </item>
    
    <item>
      <title>1277 - Count Square Submatrices with All Ones</title>
      <link>//alfmunny.com/leetcode-blog/posts/1227-count-square-submatrices-with-all-ones/</link>
      <pubDate>Fri, 22 May 2020 00:01:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/1227-count-square-submatrices-with-all-ones/</guid>
      <description>leetcode
Problem Given a m * n matrix of ones and zeros, return how many square submatrices have all ones. Example 1: Input: matrix = [ [0,1,1,1], [1,1,1,1], [0,1,1,1] ] Output: 15 Explanation: There are 10 squares of side 1. There are 4 squares of side 2. There is 1 square of side 3. Total number of squares = 10 + 4 + 1 = 15. Example 2: Input: matrix = [ [1,0,1], [1,1,0], [1,1,0] ] Output: 7 Explanation: There are 6 squares of side 1.</description>
    </item>
    
    <item>
      <title>918 - Maximum Sum Circular Subarray</title>
      <link>//alfmunny.com/leetcode-blog/posts/918-maximum-sum-circular-subarray/</link>
      <pubDate>Fri, 15 May 2020 22:27:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/918-maximum-sum-circular-subarray/</guid>
      <description>leetcode
Problem  Given a circular array C of integers represented by A, find the maximum possible sum of a non-empty subarray of C.
Here, a circular array means the end of the array connects to the beginning of the array. (Formally, C[i] = A[i] when 0 &amp;lt;= i &amp;lt; A.length, and C[i+A.length] = C[i] when i &amp;gt;= 0.)
Also, a subarray may only include each element of the fixed buffer A at most once.</description>
    </item>
    
    <item>
      <title>337 - House Robber III</title>
      <link>//alfmunny.com/leetcode-blog/posts/337-house-robber-ii/</link>
      <pubDate>Wed, 06 May 2020 17:43:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/337-house-robber-ii/</guid>
      <description>leetcode
Problem The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the &amp;#34;root.&amp;#34; Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that &amp;#34;all houses in this place forms a binary tree&amp;#34;. It will automatically contact the police if two directly-linked houses were broken into on the same night.</description>
    </item>
    
    <item>
      <title>887 - Super Egg Drop</title>
      <link>//alfmunny.com/leetcode-blog/posts/887-super-egg-drop/</link>
      <pubDate>Sun, 03 May 2020 01:16:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/887-super-egg-drop/</guid>
      <description>leetcode
Problem You are given K eggs, and you have access to a building with N floors from 1 to N. Each egg is identical in function, and if an egg breaks, you cannot drop it again. You know that there exists a floor F with 0 &amp;lt;= F &amp;lt;= N such that any egg dropped at a floor higher than F will break, and any egg dropped at or below floor F will not break.</description>
    </item>
    
    <item>
      <title>1143 - Longest Common Subsequence</title>
      <link>//alfmunny.com/leetcode-blog/posts/1143-longest-common-subsequence/</link>
      <pubDate>Mon, 27 Apr 2020 14:49:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/1143-longest-common-subsequence/</guid>
      <description>leetcode
Problem Given two strings text1 and text2, return the length of their longest common subsequence. A subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remaining characters. (eg, &amp;#34;ace&amp;#34; is a subsequence of &amp;#34;abcde&amp;#34; while &amp;#34;aec&amp;#34; is not). A common subsequence of two strings is a subsequence that is common to both strings.</description>
    </item>
    
    <item>
      <title>416 - Partition Equal Subset Sum</title>
      <link>//alfmunny.com/leetcode-blog/posts/416-partition-equal-subset-sum/</link>
      <pubDate>Sun, 05 Apr 2020 21:20:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/416-partition-equal-subset-sum/</guid>
      <description>leetcode
Problem Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal. Note: Each of the array element will not exceed 100. The array size will not exceed 200. Example 1: Input: [1, 5, 11, 5] Output: true Explanation: The array can be partitioned as [1, 5, 5] and [11]. Example 2: Input: [1, 2, 3, 5] Output: false Explanation: The array cannot be partitioned into equal sum subsets.</description>
    </item>
    
    <item>
      <title>494 - Target Sum</title>
      <link>//alfmunny.com/leetcode-blog/posts/494-target-sum/</link>
      <pubDate>Sat, 04 Apr 2020 16:24:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/494-target-sum/</guid>
      <description>leetcode
Problem You are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols + and -. For each integer, you should choose one from + and - as its new symbol. Find out how many ways to assign symbols to make sum of integers equal to target S. Example 1: Input: nums is [1, 1, 1, 1, 1], S is 3.</description>
    </item>
    
    <item>
      <title>338 - Counting Bits</title>
      <link>//alfmunny.com/leetcode-blog/posts/338-counting-bit/</link>
      <pubDate>Thu, 02 Apr 2020 17:03:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/338-counting-bit/</guid>
      <description>leetcode
Problem Given a non negative integer number num. For every numbers i in the range 0 â‰¤ i â‰¤ num calculate the number of 1&amp;#39;s in their binary representation and return them as an array. Example 1: Input: 2 Output: [0,1,1] Example 2: Input: 5 Output: [0,1,1,2,1,2] Notes DP problem
 States: index Transition:  dp[0] = 0 dp[1] = dp[1-1] + 1 = 1 dp[2] = dp[2-2] + 1 = 1 dp[3] = dp[3-2] + 1 = 2 dp[4] = dp[4-4] + 1 = 1 dp[5] = dp[5-4] + 1 = 2 dp[6] = dp[6-4] + 1 = 2 dp[7] = dp[7-4] + 1 = 3 dp[8] = dp[8-8] + 1 = 1 dp[9] = dp[9-8] + 1 = 2 dp[i] = dp[i - log_2 (i)] + 1 A trick using bit manipulation: 8 -&amp;gt; 1000 9 -&amp;gt; 1001 10 -&amp;gt; 1010 9 &amp;amp; 8 -&amp;gt; 1001 &amp;amp; 1000 -&amp;gt; 1000 dp[8] + 1 = 2 10 &amp;amp; 9 -&amp;gt; 1010 &amp;amp; 1001 -&amp;gt; 1000 dp[8] + 1 = 2 11 &amp;amp; 10 -&amp;gt; 1011 &amp;amp; 1010 -&amp;gt; 1010 dp[10] + 1 = 3 12 &amp;amp; 11 -&amp;gt; 1100 &amp;amp; 1011 -&amp;gt; 1000 dp[8] + 1 = 2 dp[i] = dp[i &amp;amp; (i-1)] + 1 Solution Solution 1: DP class Solution: def countBits(self, num): offset = 1 dp = [0] * (num + 1) for i in range(1, num + 1): if offset * 2 == i: offset *= 2 dp[i] = dp[i - offset] + 1 return dp Solution 2: Bit manipulation on couting bits class Solution: def countBits(self, num): dp = [0] * (num + 1) for i in range(1, num + 1): dp[i] = dp[i &amp;amp; (i - 1)] + 1 return dp Solution 3: class Solution(object): def countBits(self, num): res=[0] while len(res)&amp;lt;=num: res+=[i+1 for i in res] return res[:num+1] Solution 4: class Solution: def countBits(self, num): dp = [0] * (num + 1) for i in range(1, num+1): if not i % 2: dp[i] = dp[i &amp;gt;&amp;gt; 1] else: dp[i] = dp[i &amp;gt;&amp;gt; 1] + 1 return dp[num] </description>
    </item>
    
    <item>
      <title>5 - Longest Palindromic Substring</title>
      <link>//alfmunny.com/leetcode-blog/posts/5-longest-palindromic-substring/</link>
      <pubDate>Tue, 31 Mar 2020 23:57:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/5-longest-palindromic-substring/</guid>
      <description>leetcode
Problem Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000. Example 1: Input: &amp;#34;babad&amp;#34; Output: &amp;#34;bab&amp;#34; Note: &amp;#34;aba&amp;#34; is also a valid answer. Example 2: Input: &amp;#34;cbbd&amp;#34; Output: &amp;#34;bb&amp;#34; Notes DP problem
  States:
left_index, right_index, mark if s[left_index, right_index+1] is palindromic
  Transition:
if s[l] == s[r]: # mark it only when both ends are same values dp[l][r] = 1 if r == l # if only one element dp[l][r] = 1 if r+1 == l # if only two elements dp[l][r] = 1 if dp[l+1][r+1] = 1 # if the string in between is palindromic results = s[l:r+1] if r-l+1&amp;gt;len(results) # comparing the length, record the maximum   Base case:</description>
    </item>
    
    <item>
      <title>647 - Palindromic Substrings</title>
      <link>//alfmunny.com/leetcode-blog/posts/647-palindromic-substrings/</link>
      <pubDate>Tue, 31 Mar 2020 23:41:02 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/647-palindromic-substrings/</guid>
      <description>leetcode
Problem Given a string, your task is to count how many palindromic substrings in this string. The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters. Example 1: Input: &amp;#34;abc&amp;#34; Output: 3 Explanation: Three palindromic strings: &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;. Example 2: Input: &amp;#34;aaa&amp;#34; Output: 6 Explanation: Six palindromic strings: &amp;#34;a&amp;#34;, &amp;#34;a&amp;#34;, &amp;#34;a&amp;#34;, &amp;#34;aa&amp;#34;, &amp;#34;aa&amp;#34;, &amp;#34;aaa&amp;#34;. Note: The input string length won&amp;#39;t exceed 1000.</description>
    </item>
    
    <item>
      <title>279 - Perfect Squares</title>
      <link>//alfmunny.com/leetcode-blog/posts/279-perfect-squares/</link>
      <pubDate>Tue, 31 Mar 2020 00:13:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/279-perfect-squares/</guid>
      <description>leetcode
Problem Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n. Example 1: Input: n = 12 Output: 3 Explanation: 12 = 4 + 4 + 4. Example 2: Input: n = 13 Output: 2 Explanation: 13 = 4 + 9. Notes DP problem
  States: n
  Transition:
  dp[i] = min([_dp[i-j*j]+1 if i-j*j &amp;gt;= 0 else break for j in range(1, sqrt(i)+1)])   Base case:</description>
    </item>
    
    <item>
      <title>221 - Maximal Square</title>
      <link>//alfmunny.com/leetcode-blog/posts/221-maximal-square/</link>
      <pubDate>Mon, 30 Mar 2020 20:21:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/221-maximal-square/</guid>
      <description>leetcode
Problem Given a 2D binary matrix filled with 0&amp;#39;s and 1&amp;#39;s, find the largest square containing only 1&amp;#39;s and return its area. Example: Input: 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 Output: 4 Notes DP Problem:
  States:
 position -&amp;gt; [i][j] how many continues 1 in vertical direction -&amp;gt; [i][j][0] how many continues 1 in horizontal direction -&amp;gt; [i][j][1] square value(or the length of the square) -&amp;gt; [i][j][2]  dp[i][j][0 or 1 or 2]</description>
    </item>
    
    <item>
      <title>96 - Unique Binary Search Trees</title>
      <link>//alfmunny.com/leetcode-blog/posts/96-unique-binary-search-trees/</link>
      <pubDate>Mon, 30 Mar 2020 15:17:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/96-unique-binary-search-trees/</guid>
      <description>leetcode
Problem Given n, how many structurally unique BST&amp;#39;s (binary search trees) that store values 1 ... n? Example: Input: 3 Output: 5 Explanation: Given n = 3, there are a total of 5 unique BST&amp;#39;s: 1 3 3 2 1 \ / / / \ \ 3 2 1 1 3 2 / / \ \ 2 1 2 3 Notes Solution 1: DP In this dp problem, the hard part is to figure out the transition.</description>
    </item>
    
    <item>
      <title>152 - Maximum Product Subarray</title>
      <link>//alfmunny.com/leetcode-blog/posts/152-maximum-product-subarray/</link>
      <pubDate>Sun, 29 Mar 2020 17:40:00 +0200</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/152-maximum-product-subarray/</guid>
      <description>leetcode
Problem Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product. Example 1: Input: [2,3,-2,4] Output: 6 Explanation: [2,3] has the largest product 6. Example 2: Input: [-2,0,-1] Output: 0 Explanation: The result cannot be 2, because [-2,-1] is not a subarray. Notes DP problem:
  States: We have to know two previous states to deduct the current max product:</description>
    </item>
    
    <item>
      <title>322 - Coin Change</title>
      <link>//alfmunny.com/leetcode-blog/posts/322-coin-change/</link>
      <pubDate>Sat, 28 Mar 2020 02:17:00 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/322-coin-change/</guid>
      <description>leetcode
Problem You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1. Example 1: Input: coins = [1, 2, 5], amount = 11 Output: 3 Explanation: 11 = 5 + 5 + 1 Example 2: Input: coins = [2], amount = 3 Output: -1 Note: You may assume that you have an infinite number of each kind of coin.</description>
    </item>
    
    <item>
      <title>300 - Longest Increasing Subsequence</title>
      <link>//alfmunny.com/leetcode-blog/posts/300-longest-increasing-subsequence/</link>
      <pubDate>Sat, 28 Mar 2020 00:08:00 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/300-longest-increasing-subsequence/</guid>
      <description>leetcode
Problem Given an unsorted array of integers, find the length of longest increasing subsequence. Example: Input: [10,9,2,5,3,7,101,18] Output: 4 Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. Note: There may be more than one LIS combination, it is only necessary for you to return the length. Your algorithm should run in O(n2) complexity. Follow up: Could you improve it to O(n log n) time complexity? Solution DP problem.</description>
    </item>
    
    <item>
      <title>198 - House Robber</title>
      <link>//alfmunny.com/leetcode-blog/posts/198-house-robber/</link>
      <pubDate>Fri, 27 Mar 2020 23:58:00 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/198-house-robber/</guid>
      <description>leetcode
Problem You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night. Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.</description>
    </item>
    
    <item>
      <title>91 - Decode Ways</title>
      <link>//alfmunny.com/leetcode-blog/posts/91-decode-ways/</link>
      <pubDate>Wed, 25 Mar 2020 23:44:20 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/91-decode-ways/</guid>
      <description>leetcode
Problem A message containing letters from A-Z is being encoded to numbers using the following mapping: &amp;#39;A&amp;#39; -&amp;gt; 1 &amp;#39;B&amp;#39; -&amp;gt; 2 ... &amp;#39;Z&amp;#39; -&amp;gt; 26 Given a non-empty string containing only digits, determine the total number of ways to decode it. Example 1: Input: &amp;#34;12&amp;#34; Output: 2 Explanation: It could be decoded as &amp;#34;AB&amp;#34; (1 2) or &amp;#34;L&amp;#34; (12). Example 2: Input: &amp;#34;226&amp;#34; Output: 3 Explanation: It could be decoded as &amp;#34;BZ&amp;#34; (2 26), &amp;#34;VF&amp;#34; (22 6), or &amp;#34;BBF&amp;#34; (2 2 6).</description>
    </item>
    
    <item>
      <title>309 - Best Time to Buy and Sell Stock with Cooldown</title>
      <link>//alfmunny.com/leetcode-blog/posts/309-best-time-to-buy-and-sell-stock-with-cooldown/</link>
      <pubDate>Tue, 24 Mar 2020 22:36:00 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/309-best-time-to-buy-and-sell-stock-with-cooldown/</guid>
      <description>leetcode
Problem Say you have an array for which the ith element is the price of a given stock on day i. Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions: You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</description>
    </item>
    
    <item>
      <title>188 - Best Time to Buy and Sell Stock IV</title>
      <link>//alfmunny.com/leetcode-blog/posts/188-best-time-to-buy-and-sell-stock-iv/</link>
      <pubDate>Tue, 24 Mar 2020 21:46:00 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/188-best-time-to-buy-and-sell-stock-iv/</guid>
      <description>leetcode
Problem Say you have an array for which the i-th element is the price of a given stock on day i. Design an algorithm to find the maximum profit. You may complete at most k transactions. Note: You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again). Example 1: Input: [2,4,1], k = 2 Output: 2 Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.</description>
    </item>
    
    <item>
      <title>123 - Best Time to Buy and Sell Stock III</title>
      <link>//alfmunny.com/leetcode-blog/posts/123-best-time-to-buy-and-sell-stock-iii/</link>
      <pubDate>Tue, 24 Mar 2020 18:25:00 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/123-best-time-to-buy-and-sell-stock-iii/</guid>
      <description>leetcode
Problem Say you have an array for which the ith element is the price of a given stock on day i. Design an algorithm to find the maximum profit. You may complete at most two transactions. Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again). Example 1: Input: [3,3,5,0,0,3,1,4] Output: 6 Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.</description>
    </item>
    
    <item>
      <title>62 - Unique Paths</title>
      <link>//alfmunny.com/leetcode-blog/posts/62-unique-paths/</link>
      <pubDate>Sat, 21 Mar 2020 22:34:22 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/62-unique-paths/</guid>
      <description>leetcode
Problem A robot is located at the top-left corner of a m x n grid (marked &amp;#39;Start&amp;#39; in the diagram below). The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked &amp;#39;Finish&amp;#39; in the diagram below). How many possible unique paths are there? Note: m and n will be at most 100. Example 1: Input: m = 3, n = 2 Output: 3 Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner: 1.</description>
    </item>
    
    <item>
      <title>509 - Fibonacci Number</title>
      <link>//alfmunny.com/leetcode-blog/posts/509-fibonacci-number/</link>
      <pubDate>Sat, 21 Mar 2020 22:31:20 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/509-fibonacci-number/</guid>
      <description>leetcode
Problem The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is, F(0) = 0, F(1) = 1 F(N) = F(N - 1) + F(N - 2), for N &amp;gt; 1. Given N, calculate F(N). Example 1: Input: 2 Output: 1 Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.</description>
    </item>
    
    <item>
      <title>91 - Decode Ways</title>
      <link>//alfmunny.com/leetcode-blog/posts/90-decode-ways/</link>
      <pubDate>Sat, 21 Mar 2020 22:28:56 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/90-decode-ways/</guid>
      <description>leetcode
Problem A message containing letters from A-Z is being encoded to numbers using the following mapping: &amp;#39;A&amp;#39; -&amp;gt; 1 &amp;#39;B&amp;#39; -&amp;gt; 2 ... &amp;#39;Z&amp;#39; -&amp;gt; 26 Given a non-empty string containing only digits, determine the total number of ways to decode it. Example 1: Input: &amp;#34;12&amp;#34; Output: 2 Explanation: It could be decoded as &amp;#34;AB&amp;#34; (1 2) or &amp;#34;L&amp;#34; (12). Example 2: Input: &amp;#34;226&amp;#34; Output: 3 Explanation: It could be decoded as &amp;#34;BZ&amp;#34; (2 26), &amp;#34;VF&amp;#34; (22 6), or &amp;#34;BBF&amp;#34; (2 2 6).</description>
    </item>
    
    <item>
      <title>70 - Climbing Stairs</title>
      <link>//alfmunny.com/leetcode-blog/posts/70-climbing-stairs/</link>
      <pubDate>Sat, 21 Mar 2020 22:25:51 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/70-climbing-stairs/</guid>
      <description>leetcode
Problem You are climbing a stair case. It takes n steps to reach to the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top? Note: Given n will be a positive integer. Example 1: Input: 2 Output: 2 Explanation: There are two ways to climb to the top. 1. 1 step + 1 step 2. 2 steps Example 2: Input: 3 Output: 3 Explanation: There are three ways to climb to the top.</description>
    </item>
    
    <item>
      <title>53 - Maximum Subarray</title>
      <link>//alfmunny.com/leetcode-blog/posts/53-maximum-subarray/</link>
      <pubDate>Sat, 21 Mar 2020 22:16:34 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/53-maximum-subarray/</guid>
      <description>leetcode
Problem Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. Example: Input: [-2,1,-3,4,-1,2,1,-5,4], Output: 6 Explanation: [4,-1,2,1] has the largest sum = 6. Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle. Notes Dynamic programming problem.
Use nums[i] always store the maximum sum.</description>
    </item>
    
    <item>
      <title>64 - Minimum Path Sum</title>
      <link>//alfmunny.com/leetcode-blog/posts/64-mnimum-path-sum/</link>
      <pubDate>Wed, 04 Mar 2020 18:47:00 +0100</pubDate>
      
      <guid>//alfmunny.com/leetcode-blog/posts/64-mnimum-path-sum/</guid>
      <description>leetcode
Problem Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path. Note: You can only move either down or right at any point in time. Example: Input: [ [1,3,1], [1,5,1], [4,2,1] ] Output: 7 Explanation: Because the path 1â†’3â†’1â†’1â†’1 minimizes the sum. Notes Thinking: It seems to be a greedy algorithm problem.</description>
    </item>
    
  </channel>
</rss>